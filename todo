1、进度条封装成组件 --done
2、随机播放时，当生成的随机数和上一个相等时，会连续播放相同的歌 --done
3、剩余时间跳跃不均匀
4、鼠标点击控制音量和播放进度 --done
5、play播放器优化（仿虾米桌面端），虾米底部播放器背景应该是随着cover主色调改变而改变
6、播放进度条优化（比如高度太小鼠标难以点到）
    6-1 可触控区域高度变大 --done
    6-2 点击播放进度条，歌词滚动到相应的位置 --done(不够精确，需要优化)
7、音量控制
    7-1 可触控区域高度变大 --done
    7-2 hover即改变 --done
    7-3 move改变 --done
8、播放时会报例如（GET http://ouanvm4st.bkt.clouddn.com/Songday/songs/TRUE%20-%20Sincerely.mp3 net::ERR_CONNECTION_RESET）等错误
9、增加播放页面主体歌词轮播
    9-1 层级关系 --done
    9-2 歌词随播放进度滚动 --done
    9-3 手动滚动歌词后，自动滚动前将歌词滚动位置重置为前一次的滚动位置，再进行滚动 --暂时处理：禁止滚动
    9-4 滚动歌词部分独立成组件(组件需要动态更新)
    9-5 当前歌词突出高亮显示，其他歌词透明度随两边距离增大而减小 --done
    9-6 鼠标控制进度条，歌词跳转到相应的位置
10、注册登录功能本地模拟实现 --done
11、登录权限
    11-1 用beforeEach钩子函数控制登录权限和路由重定向
    11-2 用node连数据库实现真实注册登录
12、下拉列表美化插件，解决1-2万条数据时卡顿问题：下拉里面永远只有固定条数的选项，上滚或者下滚时去减小或者增大显示的项列表的index，
改变后渲染下拉框（高亮居中的项永远是中间的项，中间的项必定为第一项的index加上固定条数减去1除以2的值,比如说固定条数为11，第一项为3（即向下滚动了两项），则中间高亮突出项为8），
思想就是用存数据在本地代替在下拉里存放，渲染速度是一个考虑的因素。
    12-1、中间项高亮突出
    12-2、不断滚动，不断渲染的速度，以及无缝渲染（option累加?）

    初级解决方案：ul li重写select(LargeSelect)
    优化：使用原生select,操作数据达到效果
13、express + mysql完成账号注册和登录